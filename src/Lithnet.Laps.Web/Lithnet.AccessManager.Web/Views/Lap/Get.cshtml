@using Lithnet.AccessManager.Server.Configuration;
@using Microsoft.Extensions.Options;

@inject IOptionsSnapshot<UserInterfaceOptions> uiSettings

@{
    ViewBag.Title = UIMessages.HeadingRequestAccess;
}

@model Lithnet.AccessManager.Web.Models.LapRequestModel

<div class="form-container">
    @using (Html.BeginForm("Get", "Lap", FormMethod.Post))
    {
        <header>
            @UIMessages.HeadingRequestAccess
        </header>
        <fieldset>
            <section>
                <label class="title">Request type</label>
                <div class="form-check">
                    @if (uiSettings.Value.AllowLaps)
                    {
                        @Html.RadioButtonFor(m => m.RequestType, "Laps", new { @class = "form-check-input", @id = "lapscheck" })
                        <label class="form-check-label" for="lapscheck">Current local admin password</label>

                    }
                </div>
                <div class="form-check">
                    @if (uiSettings.Value.AllowLapsHistory)
                    {
                        @Html.RadioButtonFor(m => m.RequestType, "LapsHistory", new { @class = "form-check-input", @id = "lapshistorycheck" })
                        <label class="form-check-label" for="lapshistorycheck">Previous local admin passwords</label>
                    }
                </div>
                <div class="form-check">
                    @if (uiSettings.Value.AllowJit)
                    {
                        @Html.RadioButtonFor(m => m.RequestType, "Jit", new { @class = "form-check-input", @id = "jitcheck" })
                        <label class="form-check-label" for="jitcheck">Just-in-time access</label>
                    }
                </div>
            </section>

            <section>
                <label class="title">@UIMessages.ComputerName*</label>
                <label class="input">
                    <i class="icon-append fa fa-desktop"></i>
                    @Html.TextBoxFor(m => m.ComputerName, new { @class = "dataEntry" })
                    @Html.ValidationMessageFor(m => m.ComputerName)
                </label>
            </section>



            @if (Model.ShowReason)
            {
                <section>
                    <label class="title">@($"{UIMessages.UserReasonPrompt}{(Model.ReasonRequired ? "*" : string.Empty)}")</label>
                    <label class="input">

                        @if (Model.ReasonRequired)
                        {
                            @Html.TextAreaFor(m => m.UserRequestReason, new { @class = "dataEntryLarge", @required = "required" })
                        }
                        else
                        {
                            @Html.TextAreaFor(m => m.UserRequestReason, new { @class = "dataEntryLarge" })
                        }

                        @Html.ValidationMessageFor(m => m.UserRequestReason)
                    </label>
                </section>
            }

            @if (Model != null && Model.FailureReason != null)
            {
                <section>
                    <b class="error">
                        <i class="fas fa-exclamation-circle"></i> @Html.DisplayTextFor(m => m.FailureReason)
                    </b>
                </section>
            }

        </fieldset>

        <footer>
            <div class="center-content">
                @Html.AntiForgeryToken()
                <button type="submit" class="btn btn-primary">@UIMessages.ButtonRequestAccess</button>
            </div>
        </footer>
    }
</div>